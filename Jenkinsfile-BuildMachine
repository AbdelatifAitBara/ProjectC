def secrets = [
  [path: 'secrets/creds/product', engineVersion: 1, secretValues: [
    [envVar: 'DOCKER_TOKEN', vaultKey: 'dockertoken'],
    [envVar: 'DOCKER_USERNAME', vaultKey: 'dockeruser'],
    [envVar: 'DB_USER', vaultKey: 'dbuser'],
    [envVar: 'DB_PASSWORD', vaultKey: 'dbpassword']
    [envVar: 'DB_NAME', vaultKey: 'dbname']
    [envVar: 'DB_HOST', vaultKey: 'dbhost']
    [envVar: 'DB_PORT', vaultKey: 'dbport']
    [envVar: 'PRODUCT_API_URL', vaultKey: 'productapiurl']
    [envVar: 'SECRET_KEY', vaultKey: 'secretkey']
    ]],
]
def configuration = [vaultUrl: 'http://10.0.3.159:8200',  vaultCredentialId: 'Vault_Credentials', engineVersion: 1]


pipeline {
    agent { label 'Building_Machine' }

    environment {
        WORKSPACE = '/home/ubuntu/'
        PROJECT_DIR = '/home/ubuntu/ProjectC'
        PRODUCT_FOLDER = '/home/ubuntu/ProjectC/Microservices/Product'
        PRODUCT_DOCKER_IMAGE = 'abdelatifaitbara/product'
    }

    stages {

        stage('Clone Git Repository') {
            steps {
                sh "rm -rf ${PROJECT_DIR}"
                sh "git -C ${WORKSPACE} clone -b Dev --recursive git@github.com:AbdelatifAitBara/ProjectC.git"
            }
        }

        stage('Build Docker Image') {
            steps {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh "cd ${PRODUCT_FOLDER} && docker build -t ${PRODUCT_DOCKER_IMAGE}:latest -e DB_USER=${env.DB_USER} -e DB_PASSWORD=${env.DB_PASSWORD} -e DB_NAME=${env.DB_NAME} -e DB_HOST=${env.DB_HOST} -e DB_PORT=${env.DB_PORT} -e PRODUCT_API_URL=${env.PRODUCT_API_URL} -e SECRET_KEY=${env.SECRET_KEY} ."
                    }
            }
        }


        stage('Push Product Image to DockerHub') {
            steps {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN"
                        sh "docker push docker.io/${PRODUCT_DOCKER_IMAGE}:latest"
                    }
                }  
            }
            
    }


    post {
        failure {
            echo "Build failed: ${currentBuild.result}"
        }
        success {
            echo "Build succeeded: ${currentBuild.result}"
        }
    }

}