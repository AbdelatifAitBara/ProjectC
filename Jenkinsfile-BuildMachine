def secrets = [
    [path: 'secrets/creds/product', engineVersion: 1, secretValues: [
        [envVar: 'DOCKER_TOKEN', vaultKey: 'dockertoken'],
        [envVar: 'DOCKER_USERNAME', vaultKey: 'dockeruser'],
        [envVar: 'MYSQL_DATABASE_USER', vaultKey: 'MYSQL_DATABASE_USER'],
        [envVar: 'MYSQL_DATABASE_PASSWORD', vaultKey: 'MYSQL_DATABASE_PASSWORD'],
        [envVar: 'MYSQL_DATABASE_DB', vaultKey: 'MYSQL_DATABASE_DB'],
        [envVar: 'MYSQL_DATABASE_HOST', vaultKey: 'MYSQL_DATABASE_HOST'],
        [envVar: 'DB_PORT', vaultKey: 'dbport'], 
        [envVar: 'PRODUCT_API_URL', vaultKey: 'productapiurl'],
        [envVar: 'SECRET_KEY', vaultKey: 'secretkey']
    ]]
]

def configuration = [vaultUrl: 'http://10.0.3.159:8200',  vaultCredentialId: 'Vault_Credentials', engineVersion: 1]

pipeline {
    agent { label 'Building_Machine' }

    environment {
        TAG = 'ProjectV50'
        WORKSPACE = '/home/ubuntu/'
        PROJECT_DIR = '/home/ubuntu/ProjectC'
        PRODUCT_FOLDER = '/home/ubuntu/ProjectC/Microservices/Product'
        PRODUCT_DOCKER_IMAGE = 'abdelatifaitbara/product'
        MYSQL_DATABASE_USER = '$envVar.MYSQL_USER'
    }  


    stages {

        stage('Clone Git Repository') {
            steps {
                sh "rm -rf ${PROJECT_DIR}"
                sh "git -C ${WORKSPACE} clone -b Dev --recursive git@github.com:AbdelatifAitBara/ProjectC.git"
            }
        }


        stage('Build Product Image') {
            steps {
                dir("${PRODUCT_FOLDER}") {
                    sh "docker build --build-arg MYSQL_DATABASE_USER='$MYSQL_DATABASE_USER' -t ${PRODUCT_DOCKER_IMAGE}:${TAG} ."
                }
            }
        }


        stage('Push Product Image to DockerHub') {
            steps {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN'
                        sh 'docker push docker.io/${PRODUCT_DOCKER_IMAGE}:${TAG}'
                    }
                }  
            }
            
    }


    post {
        failure {
            echo "Build failed: ${currentBuild.result}"
        }
        success {
            echo "Build succeeded: ${currentBuild.result}"
        }
    }

}