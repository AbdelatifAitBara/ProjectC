def secrets = [
    [path: 'secrets/creds/projetc', engineVersion: 1, secretValues: [
        [envVar: 'MYSQL_DATABASE_USER', vaultKey: 'MYSQL_DATABASE_USER'],
        [envVar: 'MYSQL_DATABASE_PASSWORD', vaultKey: 'MYSQL_DATABASE_PASSWORD'],
        [envVar: 'MYSQL_DATABASE_DB', vaultKey: 'MYSQL_DATABASE_DB'],
        [envVar: 'MYSQL_DATABASE_HOST', vaultKey: 'MYSQL_DATABASE_HOST'],
        [envVar: 'PRODUCT_API_URL', vaultKey: 'productapiurl'],
        [envVar: 'ORDER_API_URL', vaultKey: 'orderapiurl'],
        [envVar: 'CUSTOMER_API_URL', vaultKey: 'customerapiurl'],
        [envVar: 'SECRET_KEY', vaultKey: 'secretkey'],
        [envVar: 'CONSUMER_KEY', vaultKey: 'consumerkey'],
        [envVar: 'CONSUMER_SECRET', vaultKey: 'consumersecret'],
        [envVar: 'ECR_USERNAME', vaultKey: 'ecr-username'],
        [envVar: 'ECR_REPOSITORY', vaultKey: 'ecr-repository'],
        [envVar: 'K6_TOKEN', vaultKey: 'k6token'],
    ]]
]

def configuration = [vaultUrl: 'http://10.0.112.134:8200',  vaultCredentialId: 'Vault_Credentials', engineVersion: 1]



pipeline {


    agent { label 'Building_Machine' }

    environment {
        WORKSPACE = '/home/ubuntu/'
        PROJECT_DIR = '/home/ubuntu/ProjectC'
        PRODUCT_FOLDER = '/home/ubuntu/ProjectC/Microservices/Product'
        ECR_CUSTOMER= 'abdelatif-ecr-customer'
        ECR_ORDER= 'abdelatif-ecr-order'
        ECR_PRODUCT= 'abdelatif-ecr-product'
    }   

    stages {

        stage('Clone Git Repository') {
            steps {
                sh "rm -rf ${PROJECT_DIR}"
                sh "git -C ${WORKSPACE} clone -b Dev --recursive git@github.com:AbdelatifAitBara/ProjectC.git"
            }
        }
        
        stage('Get Git Commit Short Hash') {
            steps {
                script {
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git --git-dir=${PROJECT_DIR}/.git rev-parse --short HEAD').trim()
                }
            }
        }

                stage('Snyk Scan Python Code') {
            steps {
                echo 'Code Scanning...'
                snykSecurity(
                snykInstallation: 'snyk@latest',
                snykTokenId: 'Snyk_Token',
                failOnIssues: 'false',
                monitorProjectOnBuild: 'false',
                additionalArguments: '--code -debug'
                )
            }
        }

        stage('Snyk IaC Scan') {
            steps {
                echo 'Running Snyk IaC Scan'
                snykSecurity(
                snykInstallation: 'snyk@latest', 
                snykTokenId: 'Snyk_Token',
                failOnIssues: false,
                monitorProjectOnBuild: false,
                additionalArguments: '--iac --severity-threshold=low --report -d'
                )
                }
        }

        stage('Build Customer Image') {
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    dir("${PROJECT_DIR}/Microservices/Customer") {
                        sh 'docker build --build-arg MYSQL_DATABASE_USER=$MYSQL_DATABASE_USER --build-arg MYSQL_DATABASE_PASSWORD=$MYSQL_DATABASE_PASSWORD --build-arg MYSQL_DATABASE_DB=$MYSQL_DATABASE_DB --build-arg MYSQL_DATABASE_HOST=$MYSQL_DATABASE_HOST --build-arg CUSTOMER_API_URL=$CUSTOMER_API_URL --build-arg SECRET_KEY=$SECRET_KEY --build-arg CONSUMER_KEY=$CONSUMER_KEY --build-arg CONSUMER_SECRET=$CONSUMER_SECRET -t $ECR_REPOSITORY/${ECR_CUSTOMER}:${GIT_COMMIT} .'
                    }
                }
            }
        }

        stage('Push Customer Image to DockerHub') {
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh 'aws ecr get-login-password --region eu-west-1 | docker login --username $ECR_USERNAME --password-stdin $ECR_REPOSITORY'
                    sh 'docker push $ECR_REPOSITORY/${ECR_CUSTOMER}:${GIT_COMMIT}'
                }
            }
        }


        stage('Build Product Image') {
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                        dir("${PRODUCT_FOLDER}") {
                            sh 'docker build --build-arg MYSQL_DATABASE_USER=$MYSQL_DATABASE_USER --build-arg MYSQL_DATABASE_PASSWORD=$MYSQL_DATABASE_PASSWORD --build-arg MYSQL_DATABASE_DB=$MYSQL_DATABASE_DB --build-arg MYSQL_DATABASE_HOST=$MYSQL_DATABASE_HOST --build-arg PRODUCT_API_URL=$PRODUCT_API_URL --build-arg SECRET_KEY=$SECRET_KEY --build-arg CONSUMER_KEY=$CONSUMER_KEY --build-arg CONSUMER_SECRET=$CONSUMER_SECRET -t $ECR_REPOSITORY/${ECR_PRODUCT}:${GIT_COMMIT} .'
                    }
                    
                }
            }
        }


        stage('Push Product Image to DockerHub') {
            steps {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh 'aws ecr get-login-password --region eu-west-1 | docker login --username $ECR_USERNAME --password-stdin $ECR_REPOSITORY'
                        sh 'docker push $ECR_REPOSITORY/${ECR_PRODUCT}:${GIT_COMMIT}'
                    }
            }  
        }

        stage('Build Order Image') {
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    dir("${PROJECT_DIR}/Microservices/Order") {
                        sh 'docker build --build-arg MYSQL_DATABASE_USER=$MYSQL_DATABASE_USER --build-arg MYSQL_DATABASE_PASSWORD=$MYSQL_DATABASE_PASSWORD --build-arg MYSQL_DATABASE_DB=$MYSQL_DATABASE_DB --build-arg MYSQL_DATABASE_HOST=$MYSQL_DATABASE_HOST --build-arg ORDER_API_URL=$ORDER_API_URL --build-arg SECRET_KEY=$SECRET_KEY --build-arg CONSUMER_KEY=$CONSUMER_KEY --build-arg CONSUMER_SECRET=$CONSUMER_SECRET -t $ECR_REPOSITORY/${ECR_ORDER}:${GIT_COMMIT} .'
                    }
                }

            }
        }

        stage('Push Order Image to DockerHub') {
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh 'aws ecr get-login-password --region eu-west-1 | docker login --username $ECR_USERNAME --password-stdin $ECR_REPOSITORY'
                    sh 'docker push $ECR_REPOSITORY/${ECR_ORDER}:${GIT_COMMIT}'
                }
            }
        }

        stage('Scan Microservices Images Using Trivy') {
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh '''
                        trivy image --severity CRITICAL --exit-code 1 $ECR_REPOSITORY/${ECR_CUSTOMER}:${GIT_COMMIT}
                        trivy image --severity CRITICAL --exit-code 1 $ECR_REPOSITORY/${ECR_PRODUCT}:${GIT_COMMIT}
                        trivy image --severity CRITICAL --exit-code 1 $ECR_REPOSITORY/${ECR_ORDER}:${GIT_COMMIT}
                    '''
                }
            }
        }

        stage('Delete All Images') {

            steps {
                sh 'docker image prune -a -f'
            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Trigger GitOps Job') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                input message: 'Approve deployment to Cluster?', ok: 'Deploy'
                build job: 'GitOps', parameters: [
                string(name: 'TOKEN', value: 'GitOps_Job'),
                string(name: 'COMMIT', value: env.GIT_COMMIT) 
                ]  
            }
            post {
                failure {
                    echo "Deployment Skipped"
                }
            }

        }


        stage('Performance & Loading Tests using K6') {
            steps {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    sh '''
                        k6 login cloud --token $K6_TOKEN
                        k6 cloud /home/ubuntu/ProjectC/Loading&Performance/smoke-test-wp.js --insecure-skip-tls-verify
                    '''
                }
            }
        }

    }


    post {
        failure {
            echo "Build failed: ${currentBuild.result}"
        }
        success {
            echo "Build succeeded: ${currentBuild.result}"
        }
    }

}